<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>My New Hugo Site</title>
    <link>https://thilankal.github.io/</link>
    <description>Recent content on My New Hugo Site</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 06 Jan 2024 23:53:19 +0530</lastBuildDate><atom:link href="https://thilankal.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Streams</title>
      <link>https://thilankal.github.io/blog/java/streams/</link>
      <pubDate>Sat, 06 Jan 2024 23:53:19 +0530</pubDate>
      
      <guid>https://thilankal.github.io/blog/java/streams/</guid>
      <description>map vs flatMap map is a one-to-one function map(f1t1) =&amp;gt; Stream&amp;lt;R&amp;gt; flatMap is a one-to-many function map(f1tn) =&amp;gt; Stream&amp;lt;List&amp;lt;R&amp;gt;&amp;gt; </description>
    </item>
    
    <item>
      <title>Completable Futures - thenApply vs thenCompose</title>
      <link>https://thilankal.github.io/blog/java/completable-futures/then-compose/</link>
      <pubDate>Sat, 06 Jan 2024 23:14:07 +0530</pubDate>
      
      <guid>https://thilankal.github.io/blog/java/completable-futures/then-compose/</guid>
      <description>Let&amp;rsquo;s wrap a blocking operation in a CompletablFuture
public static Integer blockingCall(int x) { return x * 2; } public static CompletableFuture&amp;lt;Integer&amp;gt; asyncRunner(int x) { return CompletableFuture.supplyAsync(() -&amp;gt; blockingCall(x)); } Here we chain the outputs so that it prints the aggregated results. But this will print the future not the value (16)
public static void main(String[] args) { asyncRunner(4) .thenApply(data -&amp;gt; asyncRunner(data)) // returns CompletableFuture&amp;lt;Integer&amp;gt; yikes! - analogous to map operation .</description>
    </item>
    
    <item>
      <title>About</title>
      <link>https://thilankal.github.io/about/</link>
      <pubDate>Fri, 24 Mar 2023 00:00:00 +0000</pubDate>
      
      <guid>https://thilankal.github.io/about/</guid>
      <description>Welcome to my personal website! My name is Thilanka Liyanaarachchi, and I am a Senior Tech Lead based in Sri Lanka. With over 8 years of experience in the industry, I have honed my skills in Java, Scala, and backend development. Additionally, I have experience in frontend development with SvelteJS and Angular, and I am passionate about exploring new technologies to enhance my skill set.
I also have expertise in DevOps, with experience working with AWS, GitLab, Kubernetes, and Terraform.</description>
    </item>
    
    <item>
      <title>B grade movies gg</title>
      <link>https://thilankal.github.io/blog/b/</link>
      <pubDate>Fri, 24 Mar 2023 00:12:05 +0530</pubDate>
      
      <guid>https://thilankal.github.io/blog/b/</guid>
      <description>Someone likes B </description>
    </item>
    
    <item>
      <title>Notion of music gg</title>
      <link>https://thilankal.github.io/blog/a/</link>
      <pubDate>Fri, 24 Mar 2023 00:12:05 +0530</pubDate>
      
      <guid>https://thilankal.github.io/blog/a/</guid>
      <description>This is post is not about music</description>
    </item>
    
    <item>
      <title>Sine wave generator using Golang</title>
      <link>https://thilankal.github.io/blog/golang/sine-wave-generator/</link>
      <pubDate>Wed, 22 Mar 2023 10:55:38 +0530</pubDate>
      
      <guid>https://thilankal.github.io/blog/golang/sine-wave-generator/</guid>
      <description>Let&amp;rsquo;s build a continuous sine wave generator with Go. This could be the first step into creating your ground breaking synthesizer, who knows :) But some theory first before we dive in.
How digital audio works We know that sound waves are vibrations travelling through air. These vibrations cause air pressure changes from sound source (Generator in our case) to receiver (our ears) over time. It is important to note that air particles do not travel with vibrations to receiver.</description>
    </item>
    
  </channel>
</rss>
